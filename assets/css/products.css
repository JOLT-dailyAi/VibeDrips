// products.js - Fixed Product Display and Filtering Functions

/**
 * Set time-based filter for products
 */
function setTimeFilter(filter) {
    console.log(`Setting time filter: ${filter}`);
    VibeDrips.currentTimeFilter = filter;
    
    // Update active state
    document.querySelectorAll('.time-category').forEach(cat => {
        cat.classList.remove('active');
        if (cat.getAttribute('data-filter') === filter) {
            cat.classList.add('active');
        }
    });

    // Filter products based on time category
    switch (filter) {
        case 'hot':
            // Hot = Recent products (last 30 days) with good ratings
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            VibeDrips.filteredProducts = VibeDrips.allProducts.filter(product => {
                const productDate = new Date(product.date_first_available || product.timestamp);
                return productDate >= thirtyDaysAgo && parseFloat(product.customer_rating) >= 4.0;
            });
            break;
            
        case 'featured':
            // Featured = High rated products with good reviews
            VibeDrips.filteredProducts = VibeDrips.allProducts.filter(product => 
                parseFloat(product.customer_rating) >= 4.5 || parseInt(product.review_count) >= 50);
            break;
            
        case 'new':
            // New = Products from last 60 days
            const sixtyDaysAgo = new Date();
            sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);
            VibeDrips.filteredProducts = VibeDrips.allProducts.filter(product => {
                const productDate = new Date(product.date_first_available || product.timestamp);
                return productDate >= sixtyDaysAgo;
            });
            break;
            
        case 'trending':
            // Trending = Products with high review activity
            VibeDrips.filteredProducts = VibeDrips.allProducts.filter(product => 
                parseInt(product.review_count) >= 20);
            break;
            
        case 'all':
        default:
            VibeDrips.filteredProducts = [...VibeDrips.allProducts];
    }

    // Update section title
    const titles = {
        'hot': 'Hot This Month',
        'featured': 'Featured Products', 
        'new': 'New Arrivals',
        'trending': 'Trending Now',
        'all': 'All Products'
    };
    
    const subtitles = {
        'hot': 'Trending products that just dropped and making waves',
        'featured': 'Hand-picked premium selections with top ratings',
        'new': 'Latest arrivals fresh from our curated collection',
        'trending': 'Popular picks generating buzz right now',
        'all': 'Complete collection of curated finds and drops'
    };
    
    const titleEl = document.getElementById('section-title');
    const subtitleEl = document.getElementById('section-subtitle');
    
    if (titleEl) titleEl.textContent = titles[filter] || 'Products';
    if (subtitleEl) subtitleEl.textContent = subtitles[filter] || '';

    // Apply current search/category filters
    applyCurrentFilters();
    
    // Default sort by rating (highest to lowest) for "all" products
    if (filter === 'all') {
        const sortEl = document.getElementById('price-sort');
        if (sortEl && sortEl.value !== 'rating') {
            sortEl.value = 'rating';
        }
        sortProductsByRating();
    }
    
    renderProducts();
}

/**
 * Apply current search and category filters
 */
function applyCurrentFilters() {
    const searchInput = document.getElementById('search');
    const categoryFilter = document.getElementById('category-filter');
    
    const searchTerm = searchInput ? searchInput.value.toLowerCase().trim() : '';
    const categoryValue = categoryFilter ? categoryFilter.value.trim() : '';

    if (searchTerm || categoryValue) {
        VibeDrips.filteredProducts = VibeDrips.filteredProducts.filter(product => {
            const searchFields = [
                product.name, 
                product.description, 
                product.brand,
                product.category,
                product.subcategory,
                product.productTitle
            ].filter(field => field); // Remove null/undefined fields
            
            const matchesSearch = !searchTerm || searchFields.some(field => 
                field.toString().toLowerCase().includes(searchTerm)
            );

            const matchesCategory = !categoryValue || 
                product.category === categoryValue || 
                product.subcategory === categoryValue ||
                (product.categoryHierarchy && product.categoryHierarchy.includes(categoryValue));

            return matchesSearch && matchesCategory;
        });
    }
}

/**
 * Filter products (called by search/category inputs)
 */
function filterProducts() {
    setTimeFilter(VibeDrips.currentTimeFilter);
}

/**
 * Sort products by selected criteria
 */
function sortProducts() {
    const sortSelect = document.getElementById('price-sort');
    if (!sortSelect) return;
    
    const sortBy = sortSelect.value;

    switch (sortBy) {
        case 'price-low':
            VibeDrips.filteredProducts.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));
            break;
        case 'price-high':
            VibeDrips.filteredProducts.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));
            break;
        case 'name':
            VibeDrips.filteredProducts.sort((a, b) => a.name.localeCompare(b.name));
            break;
        case 'rating':
            sortProductsByRating();
            break;
        default:
            // Default sorting - featured products first, then by rating
            VibeDrips.filteredProducts.sort((a, b) => {
                const aRating = parseFloat(a.customer_rating) || 0;
                const bRating = parseFloat(b.customer_rating) || 0;
                const aReviews = parseInt(a.review_count) || 0;
                const bReviews = parseInt(b.review_count) || 0;
                
                // Featured products first
                const aFeatured = aRating >= 4.5 || aReviews >= 50;
                const bFeatured = bRating >= 4.5 || bReviews >= 50;
                
                if (aFeatured && !bFeatured) return -1;
                if (!aFeatured && bFeatured) return 1;
                
                // Then by rating
                if (bRating !== aRating) return bRating - aRating;
                
                // Finally by name
                return a.name.localeCompare(b.name);
            });
    }

    renderProducts();
}

/**
 * Sort products by rating (highest to lowest)
 */
function sortProductsByRating() {
    VibeDrips.filteredProducts.sort((a, b) => {
        const aRating = parseFloat(a.customer_rating) || 0;
        const bRating = parseFloat(b.customer_rating) || 0;
        const aReviews = parseInt(a.review_count) || 0;
        const bReviews = parseInt(b.review_count) || 0;
        
        // Sort by rating first (highest to lowest)
        if (bRating !== aRating) return bRating - aRating;
        
        // If ratings are equal, sort by review count
        if (bReviews !== aReviews) return bReviews - aReviews;
        
        // Finally by name
        return a.name.localeCompare(b.name);
    });
}

/**
 * Render products grid
 */
function renderProducts() {
    const container = document.getElementById('products-container');
    if (!container) return;
    
    if (VibeDrips.filteredProducts.length === 0) {
        container.innerHTML = `
            <div class="no-products">
                <h3>No products found</h3>
                <p>Try adjusting your search or filters to see more products.</p>
                <button onclick="setTimeFilter('all')" class="retry-button" style="margin-top: 1rem;">
                    Show All Products
                </button>
            </div>`;
        updateStats();
        return;
    }

    const productsGrid = document.createElement('div');
    productsGrid.className = 'products-grid';

    VibeDrips.filteredProducts.forEach(product => {
        const productCard = createProductCard(product);
        productsGrid.appendChild(productCard);
    });

    container.innerHTML = '';
    container.appendChild(productsGrid);
    updateStats();
}

/**
 * Create individual product card
 */
function createProductCard(product) {
    const card = document.createElement('div');
    card.className = 'product-card';
    
    const primaryImage = product.main_image || product.MainImage;
    const imageElement = primaryImage ? 
        `<img src="${primaryImage}" alt="${escapeHtml(product.name)}" 
              onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" loading="lazy">
         <div class="product-image-placeholder" style="display:none;">üõçÔ∏è</div>` :
        `<div class="product-image-placeholder">üõçÔ∏è</div>`;

    const formattedPrice = formatPrice(parseFloat(product.price) || 0);
    
    // Determine badge
    let badge = '';
    const rating = parseFloat(product.customer_rating) || 0;
    const reviews = parseInt(product.review_count) || 0;
    
    if (rating >= 4.5) {
        badge = `<div class="product-badge">Featured</div>`;
    } else if (reviews >= 50) {
        badge = `<div class="product-badge">Popular</div>`;
    } else if (rating >= 4.0 && reviews >= 20) {
        badge = `<div class="product-badge">Trending</div>`;
    }

    // FIXED: Rating display - don't show (0) when review count is 0
    let ratingDisplay;
    if (rating > 0) {
        if (reviews > 0) {
            ratingDisplay = `<div style="color: #fbbf24;">‚òÖ ${rating.toFixed(1)} (${reviews})</div>`;
        } else {
            ratingDisplay = `<div style="color: #fbbf24;">‚òÖ ${rating.toFixed(1)}</div>`;
        }
    } else {
        ratingDisplay = `<div style="opacity: 0.5;">No ratings</div>`;
    }

    // Extract category for display
    const displayCategory = product.subcategory || 
                          (product.categoryHierarchy ? product.categoryHierarchy.split(' ‚Ä∫ ').pop() : '') ||
                          product.category || 
                          'General';

    card.innerHTML = `
        <div class="product-image">
            ${imageElement}
            ${badge}
        </div>
        <div class="product-info">
            <div class="product-category">${escapeHtml(displayCategory)}</div>
            <h3 class="product-title">${escapeHtml(product.name || product.productTitle || 'Untitled Product')}</h3>
            <div class="product-description">${escapeHtml((product.description || 'No description available').substring(0, 100))}${product.description && product.description.length > 100 ? '...' : ''}</div>
            <div class="product-price">${formattedPrice}</div>
            <div class="product-meta">
                <span>${escapeHtml(product.brand || 'VibeDrips')}</span>
                ${ratingDisplay}
            </div>
            <div class="product-actions">
                <button class="action-button btn-primary" onclick="event.stopPropagation(); openAmazonLink('${product.id}')">
                    üõí Buy on Amazon
                </button>
                <button class="action-button btn-secondary" onclick="event.stopPropagation(); showProductModal('${product.id}')">
                    Details
                </button>
            </div>
        </div>
    `;

    return card;
}

/**
 * FIXED: Open Amazon affiliate link with priority system
 */
function openAmazonLink(productId) {
    const product = VibeDrips.allProducts.find(p => p.id === productId);
    if (!product) {
        showNotification('Product not found');
        return;
    }

    // Priority: Short -> Long -> Source Link
    let amazonLink = product.amazon_short || 
                    product['Amazon SiteStripe (Short)'] ||
                    product.amazon_long ||
                    product['Amazon SiteStripe (Long)'] ||
                    product.source_link ||
                    product['Product Source Link'];

    if (amazonLink && amazonLink !== '#' && amazonLink.trim() !== '') {
        console.log('Opening Amazon affiliate link:', amazonLink);
        console.log('Product:', product.name);
        
        // Track the click
        try {
            // You can add analytics tracking here if needed
            console.log('Affiliate click tracked for:', productId);
        } catch (e) {
            console.warn('Analytics tracking failed:', e);
        }
        
        window.open(amazonLink, '_blank', 'noopener,noreferrer');
        showNotification('Opening Amazon product page...');
    } else {
        showNotification('Amazon link not available for this product');
        console.warn('No valid Amazon link found for product:', product);
    }
}

/**
 * Show product detail modal
 */
function showProductModal(productId) {
    const product = VibeDrips.allProducts.find(p => p.id === productId);
    if (!product) {
        showNotification('Product not found');
        return;
    }

    const modal = document.getElementById('product-modal');
    const modalTitle = document.getElementById('modal-product-title');
    const modalImage = document.getElementById('modal-product-image');
    const modalDetails = document.getElementById('modal-product-details');
    const modalGallery = document.getElementById('modal-image-gallery');

    if (!modal || !modalTitle || !modalImage || !modalDetails) return;

    modalTitle.textContent = product.name || product.productTitle || 'Product Details';
    
    const primaryImage = product.main_image || product.MainImage;
    modalImage.src = primaryImage || 'https://via.placeholder.com/400x400/667eea/ffffff?text=No+Image';
    modalImage.alt = product.name || 'Product Image';

    // Setup image gallery if multiple images exist
    if (modalGallery) {
        modalGallery.innerHTML = '';
        
        let allImages = [];
        try {
            if (product.all_images) {
                if (typeof product.all_images === 'string') {
                    // Parse string array format
                    const cleanedImages = product.all_images
                        .replace(/^\["|"\]$/g, '')
                        .split('","')
                        .map(img => img.trim())
                        .filter(img => img.length > 0);
                    allImages = cleanedImages;
                } else if (Array.isArray(product.all_images)) {
                    allImages = product.all_images;
                }
            } else if (product.AllImages) {
                allImages = Array.isArray(product.AllImages) ? product.AllImages : [];
            }
        } catch (e) {
            console.warn('Error parsing product images:', e);
        }

        if (allImages.length > 1) {
            allImages.slice(0, 5).forEach((imgUrl, index) => {
                const thumbImg = document.createElement('img');
                thumbImg.src = imgUrl;
                thumbImg.className = 'gallery-thumb';
                thumbImg.onclick = () => {
                    modalImage.src = imgUrl;
                };
                modalGallery.appendChild(thumbImg);
            });
        }
    }

    const formattedPrice = formatPrice(parseFloat(product.price) || 0);
    const rating = parseFloat(product.customer_rating) || 0;
    const reviews = parseInt(product.review_count) || 0;
    
    // FIXED: Rating display in modal
    let ratingText;
    if (rating > 0) {
        if (reviews > 0) {
            ratingText = `‚òÖ ${rating.toFixed(1)} (${reviews} reviews)`;
        } else {
            ratingText = `‚òÖ ${rating.toFixed(1)}`;
        }
    } else {
        ratingText = 'No ratings yet';
    }

    modalDetails.innerHTML = `
        <div class="detail-item">
            <div class="detail-label">Price</div>
            <div class="detail-value">${formattedPrice}</div>
        </div>
        <div class="detail-item">
            <div class="detail-label">Brand</div>
            <div class="detail-value">${escapeHtml(product.brand || 'VibeDrips')}</div>
        </div>
        <div class="detail-item">
            <div class="detail-label">Category</div>
            <div class="detail-value">${escapeHtml(product.subcategory || product.category || 'General')}</div>
        </div>
        <div class="detail-item">
            <div class="detail-label">Rating</div>
            <div class="detail-value">${ratingText}</div>
        </div>
        ${product.material ? `
        <div class="detail-item">
            <div class="detail-label">Material</div>
            <div class="detail-value">${escapeHtml(product.material)}</div>
        </div>` : ''}
        ${product.color ? `
        <div class="detail-item">
            <div class="detail-label">Color</div>
            <div class="detail-value">${escapeHtml(product.color)}</div>
        </div>` : ''}
        ${product.dimensions ? `
        <div class="detail-item">
            <div class="detail-label">Dimensions</div>
            <div class="detail-value">${escapeHtml(product.dimensions)}</div>
        </div>` : ''}
        <div class="detail-item" style="grid-column: 1 / -1;">
            <div class="detail-label">Description</div>
            <div class="detail-value">${escapeHtml(product.description || 'No description available')}</div>
        </div>
        <div class="detail-item" style="grid-column: 1 / -1;">
            <button class="action-button btn-primary" onclick="openAmazonLink('${product.id}')" 
                    style="width: 100%; margin-top: 1rem; font-size: 16px; padding: 15px;">
                üõí Buy on Amazon - ${formattedPrice}
            </button>
        </div>
    `;

    modal.classList.add('show');
    document.body.style.overflow = 'hidden'; // Prevent background scroll
}

/**
 * Close product modal
 */
function closeProductModal() {
    const modal = document.getElementById('product-modal');
    if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = ''; // Restore scroll
    }
}

/**
 * Format price with currency symbol
 */
function formatPrice(price) {
    if (!price || isNaN(price)) return 'Price not available';
    
    // Simple INR formatting for now - can be enhanced for multi-currency
    return `‚Çπ${price.toLocaleString('en-IN')}`;
}

/**
 * Update statistics display
 */
function updateStats() {
    const productCountEl = document.getElementById('product-count');
    const categoryCountEl = document.getElementById('category-count');
    
    if (productCountEl) productCountEl.textContent = VibeDrips.filteredProducts.length;
    if (categoryCountEl) categoryCountEl.textContent = VibeDrips.categories.size;
}

/**
 * Escape HTML to prevent XSS
 */
function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
        .toString()
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

/**
 * Show notification message
 */
function showNotification(message) {
    // Remove existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notif => notif.remove());
    
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 400);
    }, 3000);
}

// Export functions to global scope
window.setTimeFilter = setTimeFilter;
window.filterProducts = filterProducts;
window.sortProducts = sortProducts;
window.showProductModal = showProductModal;
window.closeProductModal = closeProductModal;
window.openAmazonLink = openAmazonLink;

console.log('üîß Fixed Products.js loaded successfully');
